diff --git a/webserver_pkg/setup.cfg b/webserver_pkg/setup.cfg
index 48c7417..033b892 100644
--- a/webserver_pkg/setup.cfg
+++ b/webserver_pkg/setup.cfg
@@ -1,4 +1,4 @@
 [develop]
-script-dir=$base/lib/webserver_pkg
+script_dir=$base/lib/webserver_pkg
 [install]
-install-scripts=$base/lib/webserver_pkg
+install_scripts=$base/lib/webserver_pkg
diff --git a/webserver_pkg/webserver_pkg/device_info_api.py b/webserver_pkg/webserver_pkg/device_info_api.py
index 8738ede..203cbde 100644
--- a/webserver_pkg/webserver_pkg/device_info_api.py
+++ b/webserver_pkg/webserver_pkg/device_info_api.py
@@ -90,7 +90,7 @@ def get_battery_level():
                 "battery_level": battery_level_res.level,
                 "success": True
             }
-            webserver_node.get_logger().info(f"Battery Level: {data['battery_level']}")
+            webserver_node.get_logger().debug(f"Battery Level: {data['battery_level']}")
             return jsonify(data)
         else:
             return jsonify(success=False, reason="Error")
@@ -140,3 +140,29 @@ def get_sensor_status():
                                          f"Stereo status: {data['stereo_status']}, "
                                          f"Lidar status: {data['lidar_status']}")
         return jsonify(data)
+
+def get_registered_apis():
+    """Helper function that collects all registered API routes from the Flask application.
+    
+    Returns:
+        list: List of registered API endpoints
+    """
+    from webserver_pkg.webserver import app
+    api_routes = []
+    for rule in app.url_map.iter_rules():
+        # Only include API routes, excluding static files
+        if "api" in rule.rule and "static" not in rule.rule:
+            api_routes.append(rule.rule)
+    return sorted(api_routes)
+
+@DEVICE_INFO_API_BLUEPRINT.route("/api/supported_apis", methods=["GET"])
+def get_supported_apis():
+    """API to get a list of all supported API endpoints.
+
+    Returns:
+        dict: JSON object containing success status and list of supported APIs.
+    """
+    return jsonify({
+        "success": True,
+        "apis_supported": get_registered_apis()
+    })
diff --git a/webserver_pkg/webserver_pkg/ssh_api.py b/webserver_pkg/webserver_pkg/ssh_api.py
index 0c856a3..6747c02 100644
--- a/webserver_pkg/webserver_pkg/ssh_api.py
+++ b/webserver_pkg/webserver_pkg/ssh_api.py
@@ -50,7 +50,7 @@ def is_ssh_enabled():
         # Check SSH status
         if utility.execute("/bin/systemctl --no-pager status ssh", shlex_split=True)[1].find("active (running)") > -1:
             # Check UFW status
-            stdout = utility.execute("/usr/sbin/ufw status", shlex_split=True)[1]
+            stdout = utility.execute("/usr/sbin/ufw status verbose", shlex_split=True)[1]
             if re.search("22.*ALLOW", stdout):
                 return jsonify(success=True,
                                isSshEnabled=True,
@@ -80,9 +80,9 @@ def enable_ssh():
     webserver_node.get_logger().info("Enabling SSH")
     try:
         # Start SSH
-        utility.execute("/usr/sbin/service ssh start", shlex_split=True)
+        utility.execute("/bin/systemctl enable ssh && /bin/systemctl start ssh", shlex_split=True)
         # Allow SSH
-        utility.execute("/usr/sbin/ufw allow ssh", shlex_split=True)
+        utility.execute("/usr/sbin/ufw allow OpenSSH", shlex_split=True)
         return jsonify(success=True, isSshEnabled=True, reason="Ssh enabled.")
     except Exception as ex:
         webserver_node.get_logger().error(f"Failed to enable ssh: {ex}")
@@ -101,7 +101,7 @@ def disable_ssh():
     webserver_node.get_logger().info("Disabling SSH")
     try:
         # Stop SSH
-        utility.execute("/usr/sbin/service ssh stop", shlex_split=True)
+        utility.execute("/bin/systemctl disable ssh && /bin/systemctl stop ssh", shlex_split=True)
         return jsonify(success=True, isSshEnabled=False, reason="Ssh disabled.")
     except Exception as ex:
         webserver_node.get_logger().error(f"Failed to disable ssh: {ex}")
diff --git a/webserver_pkg/webserver_pkg/utility.py b/webserver_pkg/webserver_pkg/utility.py
index 4544d0d..6b304d9 100755
--- a/webserver_pkg/webserver_pkg/utility.py
+++ b/webserver_pkg/webserver_pkg/utility.py
@@ -45,18 +45,18 @@ def call_service_sync(cli, req, timeout=10, sleep_time=0.01):
     """
     webserver_node = webserver_publisher_node.get_webserver_node()
     if cli.service_is_ready():
-        webserver_node.get_logger().info(f"Service call initiated: {cli.srv_name}")
+        webserver_node.get_logger().debug(f"Service call initiated: {cli.srv_name}")
         future = cli.call_async(req)
         sequence = -1
         for seq, req_future in cli._pending_requests.items():
             if req_future == future:
                 sequence = seq
                 break
-        webserver_node.get_logger().info(f"New request: {sequence} {cli.srv_name}")
+        webserver_node.get_logger().debug(f"New request: {sequence} {cli.srv_name}")
         elapsed_time = 0
         while not future.done():
             if elapsed_time == int(elapsed_time):
-                webserver_node.get_logger().info(f"Service call not finished: {sequence} {cli.srv_name}")
+                webserver_node.get_logger().debug(f"Service call not finished: {sequence} {cli.srv_name}")
             time.sleep(sleep_time)
             elapsed_time += sleep_time
             if elapsed_time >= timeout:
@@ -66,13 +66,13 @@ def call_service_sync(cli, req, timeout=10, sleep_time=0.01):
                 if future.cancelled():
                     webserver_node.get_logger().error(f"Service was cancelled: {sequence} {cli.srv_name}")
                 return None
-        webserver_node.get_logger().info(f"Service call finished: {sequence} {cli.srv_name}")
+        webserver_node.get_logger().debug(f"Service call finished: {sequence} {cli.srv_name}")
         if future.exception() is not None:
             webserver_node.get_logger().error(f"Error while calling service: {sequence} - "
                                               f"{cli.srv_name} - {future.exception()}")
         return future.result()
     else:
-        webserver_node.get_logger().info(f"Service is not ready: {cli.srv_name}")
+        webserver_node.get_logger().warn(f"Service is not ready: {cli.srv_name}")
         return None
 
 
@@ -91,14 +91,14 @@ def execute(cmd, input_str=None, shell=False, shlex_split=False):
         tuple: A tuple of return code and the output of the command.
     """
     webserver_node = webserver_publisher_node.get_webserver_node()
-    webserver_node.get_logger().info(f"Command executing: {cmd}")
+    webserver_node.get_logger().debug(f"Command executing: {cmd}")
     if shlex_split:
         cmd = shlex.split(cmd)
     proc = Popen(cmd, stdout=PIPE, stdin=PIPE, stderr=STDOUT,
                  universal_newlines=True, shell=shell)
     stdout = proc.communicate(input=input_str)[0]
 
-    webserver_node.get_logger().info(f"{cmd} : execute output: {stdout}")
+    webserver_node.get_logger().debug(f"{cmd} : execute output: {stdout}")
 
     return proc.returncode, stdout
 
diff --git a/webserver_pkg/webserver_pkg/webserver.py b/webserver_pkg/webserver_pkg/webserver.py
index 2c0a76f..61ab9e0 100755
--- a/webserver_pkg/webserver_pkg/webserver.py
+++ b/webserver_pkg/webserver_pkg/webserver.py
@@ -23,6 +23,7 @@ This is the main module used to create the flask application object. All the blu
 are imported and registered with the application object.
 """
 
+import logging
 import os
 from flask_cors import CORS
 from flask import Flask
@@ -42,6 +43,7 @@ from webserver_pkg.wifi_settings import WIFI_SETTINGS_BLUEPRINT
 template_dir = os.path.abspath('/opt/aws/deepracer/lib/device_console/templates')
 # Create the Flask application object.
 app = Flask(__name__, template_folder=template_dir)
+logging.getLogger('werkzeug').disabled = True
 CORS(app)
 csrf = CSRFProtect()
 # Initialize the application with CSRF and register all the API blueprints.
@@ -58,7 +60,7 @@ app.register_blueprint(DEVICE_INFO_API_BLUEPRINT)
 app.register_blueprint(MODELS_BLUEPRINT)
 
 app.config.update(
-    DEBUG=True,
+    DEBUG=False,
     SECRET_KEY='secret_',
     SESSION_COOKIE_SECURE=True,
     REMEMBER_COOKIE_SECURE=True)
diff --git a/webserver_pkg/webserver_pkg/webserver_publisher_node.py b/webserver_pkg/webserver_pkg/webserver_publisher_node.py
index 1b110b7..df9481e 100755
--- a/webserver_pkg/webserver_pkg/webserver_publisher_node.py
+++ b/webserver_pkg/webserver_pkg/webserver_publisher_node.py
@@ -354,16 +354,23 @@ def get_webserver_node():
 
 
 def main(args=None):
-    global webserver_node
-    rclpy.init(args=args)
-    webserver_node = WebServerNode()
-    executor = MultiThreadedExecutor()
-    rclpy.spin(webserver_node, executor)
-    # Destroy the node explicitly
-    # (optional - otherwise it will be done automatically
-    # when the garbage collector destroys the node object)
-    webserver_node.destroy_node()
-    rclpy.shutdown()
+    try:
+        global webserver_node
+        rclpy.init(args=args)
+        webserver_node = WebServerNode()
+        executor = MultiThreadedExecutor()
+        rclpy.spin(webserver_node, executor)
+        # Destroy the node explicitly
+        # (optional - otherwise it will be done automatically
+        # when the garbage collector destroys the node object)
+        webserver_node.destroy_node()
+
+    except KeyboardInterrupt:
+        pass
+
+    finally:
+        if rclpy.ok():
+            rclpy.shutdown()
 
 
 if __name__ == "__main__":
diff --git a/webserver_pkg/webserver_pkg/wifi_settings.py b/webserver_pkg/webserver_pkg/wifi_settings.py
index a9582f4..c106a49 100755
--- a/webserver_pkg/webserver_pkg/wifi_settings.py
+++ b/webserver_pkg/webserver_pkg/wifi_settings.py
@@ -50,7 +50,7 @@ def check_usb_connection():
     except Exception as arg:
         webserver_node.get_logger().info(f"USB connection check exception: {arg}")
 
-    webserver_node.get_logger().info(f"Check OTG Link State: {is_usb_connected}")
+    webserver_node.get_logger().debug(f"Check OTG Link State: {is_usb_connected}")
     return {"success": True, "is_usb_connected": is_usb_connected}
 
 
diff --git a/webserver_pkg/webserver_pkg/login.py b/webserver_pkg/webserver_pkg/login.py
index b5fe8bb..f83ba93 100755
--- a/webserver_pkg/webserver_pkg/login.py
+++ b/webserver_pkg/webserver_pkg/login.py
@@ -26,6 +26,7 @@ import hmac
 import os
 import uuid
 import hashlib
+import json
 from flask import (Blueprint,
                    request,
                    make_response,
@@ -55,7 +56,7 @@ def home_page():
     """
     webserver_node = webserver_publisher_node.get_webserver_node()
 
-    status, _ = check_authentication()
+    status, _, _ = check_authentication()
     if status:
         webserver_node.get_logger().info("Authenticated")
         return render_template("index.html")
@@ -72,6 +73,7 @@ def login():
     Returns:
         flask.Response: Response object with login page or home page details.
     """
+    COOKIE_DURATION = 12
     webserver_node = webserver_publisher_node.get_webserver_node()
     webserver_node.get_logger().info(f"Called /login with {request.method}")
     if request.method == "POST":
@@ -85,12 +87,30 @@ def login():
                 webserver_node.get_logger().info("Password check passed")
                 token = str(uuid.uuid4())
                 try:
+                    # Create expiry timestamp (1 hour from now)
+                    expires_at = (datetime.datetime.now() + datetime.timedelta(hours=COOKIE_DURATION)).isoformat()
+
+                    # Load existing tokens or create new structure
+                    tokens_data = {"tokens": []}
+                    if os.path.exists(TOKEN_PATH) and os.path.getsize(TOKEN_PATH) > 0:
+                        try:
+                            with open(TOKEN_PATH, "r") as token_file:
+                                tokens_data = json.load(token_file)
+                        except json.JSONDecodeError:
+                            # If file exists but isn't valid JSON, start fresh
+                            tokens_data = {"tokens": []}
+
+                    # Add new token
+                    tokens_data["tokens"].append({"token": token, "expires_at": expires_at})
+
+                    # Write updated tokens to file
                     with open(TOKEN_PATH, "w") as token_file:
-                        token_file.write(token)
+                        json.dump(tokens_data, token_file)
+
                     webserver_node.get_logger().info("Token set")
                     response.set_cookie("deepracer_token",
                                         token,
-                                        max_age=datetime.timedelta(hours=1),
+                                        max_age=datetime.timedelta(hours=COOKIE_DURATION),
                                         secure=True)
                     return response
                 except IOError:
@@ -123,12 +143,16 @@ def auth():
         resp = jsonify("")
     else:
         resp = make_response("")
-    status, cookie_val = check_authentication()
+    status, cookie_val, max_age = check_authentication()
     if not status:
         return resp, 401
+    
+    # Use the token's remaining time if available, otherwise default to 1 hours
+    cookie_max_age = max_age if max_age is not None else int(datetime.timedelta(hours=1).total_seconds())
+    
     resp.set_cookie("deepracer_token",
                     cookie_val,
-                    max_age=datetime.timedelta(hours=1),
+                    max_age=cookie_max_age,
                     secure=True)
     return resp, 200
 
@@ -180,21 +204,60 @@ def check_authentication():
     """Helper function to validate the token sent in the request object.
 
     Returns:
-        tuple: A tuple of validation flag and cookie value.
+        tuple: A tuple of validation flag, cookie value, and max_age in seconds.
     """
     webserver_node = webserver_publisher_node.get_webserver_node()
     if not os.path.exists(TOKEN_PATH):
         webserver_node.get_logger().error("Token path not found")
-        return False, None
-
-    token = ""
-    with open(TOKEN_PATH, "r") as file_ptr:
-        token = file_ptr.readline()
+        return False, None, None
 
     cookie_val = str(request.cookies.get(DEEPRACER_TOKEN))
-    status = True if(hmac.compare_digest(cookie_val, token)) else False
-    webserver_node.get_logger().info(f"Cookie compare status: {status}")
-    return status, cookie_val
+    if not cookie_val:
+        return False, None, None
+
+    try:
+        with open(TOKEN_PATH, "r") as file_ptr:
+            tokens_data = json.load(file_ptr)
+
+        # Get current time
+        current_time = datetime.datetime.now()
+
+        # Create list to store valid tokens
+        valid_tokens = []
+        status = False
+        max_age = None
+
+        for token_entry in tokens_data.get("tokens", []):
+            token = token_entry.get("token")
+            expires_at = token_entry.get("expires_at")
+
+            # Parse expiry date
+            expiry_date = datetime.datetime.fromisoformat(expires_at)
+
+            # Keep token if not expired
+            if expiry_date > current_time:
+                valid_tokens.append(token_entry)
+
+                # Check if this token matches the cookie
+                if hmac.compare_digest(cookie_val, token):
+                    status = True
+                    # Calculate max_age in seconds
+                    max_age = int((expiry_date - current_time).total_seconds())
+
+        # Update token file to remove expired tokens
+        if len(valid_tokens) != len(tokens_data.get("tokens", [])):
+            tokens_data["tokens"] = valid_tokens
+            with open(TOKEN_PATH, "w") as file_ptr:
+                json.dump(tokens_data, file_ptr)
+
+        if webserver_node is not None:
+            webserver_node.get_logger().debug(f"Cookie compare status: {status}")
+
+        return status, cookie_val, max_age
+
+    except (json.JSONDecodeError, IOError) as e:
+        webserver_node.get_logger().error(f"Error reading tokens: {str(e)}")
+        return False, None, None
 
 
 def compute_password_digest(message):

diff --git a/webserver_pkg/webserver_pkg/vehicle_control.py b/webserver_pkg/webserver_pkg/vehicle_control.py
index 4a87265..126e671 100755
--- a/webserver_pkg/webserver_pkg/vehicle_control.py
+++ b/webserver_pkg/webserver_pkg/vehicle_control.py
@@ -24,6 +24,7 @@ the servo/motor.
 """
 
 import math
+import subprocess
 from flask import (Blueprint,
                    jsonify,
                    request)
@@ -312,3 +313,25 @@ def control_modes_available():
     except Exception as ex:
         webserver_node.get_logger().error(f"Unable to reach get ctrl modes service: {ex}")
         return jsonify(success=False, reason="Error")
+
+@VEHICLE_CONTROL_BLUEPRINT.route("/api/emergency_stop", methods=["POST"])
+def api_emergency_stop():
+    """API that performs an emergency stop by restarting the deepracer-core service.
+
+    Returns:
+        dict: Execution status and reason if the API call failed.
+    """
+    try:
+        retcode = subprocess.call(['sudo', 'systemctl', 'restart', 'deepracer-core'])
+        if retcode == 0:
+            return jsonify({"success": True})
+        else:
+            return jsonify({
+                "success": False,
+                "reason": f"Failed to restart service with return code: {retcode}"
+            })
+    except Exception as ex:
+        return jsonify({
+            "success": False,
+            "reason": f"Failed to restart service: {str(ex)}"
+        })