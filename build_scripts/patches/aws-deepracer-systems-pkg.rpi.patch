diff --git a/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_utils.py b/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_utils.py
index d1a6ff0..d69acbd 100644
--- a/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_utils.py
+++ b/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/network_monitor_module/network_utils.py
@@ -57,7 +57,7 @@ def get_chassis_serial():
     """
     serial = file_system_utils.read_line(network_config.CHASSIS_SERIAL).strip()
     if serial == "":
-        serial = software_update_config.PACKAGE_MASK.strip()
+        serial = software_update_config.VERSION_MASK.strip()
 
     serial = serial.lower()
     serial = serial.replace(" ", "-")
diff --git a/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_config.py b/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_config.py
index dd6670d..68f884a 100644
--- a/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_config.py
+++ b/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_config.py
@@ -25,7 +25,7 @@ GET_OTG_LINK_STATE_SERVICE_NAME = "get_otg_link_state"
 # OTG settings.
 
 ENABLE_OTG_PERIODIC_CHECK = True
-OTG_CHECK_PERIOD_IN_SECONDS = 2
+OTG_CHECK_PERIOD_IN_SECONDS = 5
 
-OTG_STATE_DIRECTORY = os.path.join(os.sep, "sys", "kernel", "debug", "dwc3.0.auto")
-OTG_LINK_STATE = "link_state"
+OTG_STATE_DIRECTORY = os.path.join(os.sep, "sys", "class", "net", "usb0")
+OTG_LINK_STATE = "operstate"
diff --git a/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_control_node.py b/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_control_node.py
index 3235515..444a4a4 100644
--- a/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_control_node.py
+++ b/src/aws-deepracer-systems-pkg/deepracer_systems_pkg/deepracer_systems_pkg/otg_module/otg_control_node.py
@@ -124,16 +124,19 @@ class OTGControlNode(Node):
     def __exit__(self, exc_type, exc_value, traceback):
         """Called when the object is destroyed.
         """
+        self.destroy_timer(self.timer)
+        self.scheduler.schedule_exit()
+
         if otg_config.ENABLE_OTG_PERIODIC_CHECK:
             self.disable_otg()
-            self.otg_check_timer.__exit__(exc_type, exc_value, traceback)
+            self.destroy_timer(self.otg_check_timer)
 
     def check_otg_connection(self):
         """Wrapper function to schedule the otg_connection_change function whenver
            there is a chagne in the host connecton status.
         """
         with utility.AutoLock(self.otg_guard):
-            host_connected = "U0" in file_system_utils.read_line(
+            host_connected = "up" in file_system_utils.read_line(
                                                     os.path.join(otg_config.OTG_STATE_DIRECTORY,
                                                                  otg_config.OTG_LINK_STATE))
             if host_connected != self.otg_connected:
@@ -179,7 +182,6 @@ class OTGControlNode(Node):
         """
         # Setup connectivity from  Windows
         usb0 = False
-        usb1 = False
 
         # Setup connectivity from Windows
         if self.execute("ip link set usb0 up"):
@@ -191,16 +193,6 @@ class OTGControlNode(Node):
         if not usb0:
                 self.get_logger().error("Ethernet Over OTG enable failed for Windows.")
 
-        # Setup connectivity from Mac
-        if self.execute("ip link set usb1 up"):
-            if self.execute("ip addr add 10.0.1.1/30 dev usb1"):
-                if self.execute("systemctl restart dnsmasq") and \
-                   self.execute("systemctl restart isc-dhcp-server"):
-                    usb1 = True
-                    self.get_logger().info("Ethernet Over OTG enabled for MAC!")
-        if not usb1:
-                self.get_logger().error("Ethernet Over OTG enable failed for MAC.")
-
         return True
 
     def disable_otg(self):
@@ -208,8 +200,6 @@ class OTGControlNode(Node):
         """
         if not self.execute("ip link set usb0 down"):
             self.get_logger().error("Ethernet Over OTG disable failed for Windows!")
-        if not self.execute("ip link set usb1 down"):
-            self.get_logger().error("Ethernet Over OTG disable failed for MAC!")
         self.get_logger().info("Ethernet Over OTG disabled!!!")
 
     def execute(self, cmd):
@@ -231,14 +221,18 @@ class OTGControlNode(Node):
 
 
 def main(args=None):
-    rclpy.init(args=args)
-    with OTGControlNode() as otg_control_node:
-        rclpy.spin(otg_control_node)
-        # Destroy the node explicitly
-        # (optional - otherwise it will be done automatically
-        # when the garbage collector destroys the node object)
-        otg_control_node.destroy_node()
-    rclpy.shutdown()
+    try:
+        rclpy.init(args=args)
+        with OTGControlNode() as otg_control_node:
+            rclpy.spin(otg_control_node)
+            otg_control_node.destroy_node()
+
+    except KeyboardInterrupt:
+        pass
+
+    finally:
+        if rclpy.ok():
+            rclpy.shutdown()
 
 
 if __name__ == "__main__":
